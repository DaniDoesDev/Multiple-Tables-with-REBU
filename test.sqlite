-- Examine three tables
SELECT * FROM trips;

SELECT * FROM riders;

SELECT * FROM cars;

-- Cross join between riders and cars
SELECT * 
FROM riders
CROSS JOIN cars;

-- Create a Trip Log with the trips and its users
SELECT *
FROM trips
LEFT JOIN riders
ON trips.rider_id = riders.id;

-- Create a link between the trips and cars used during them
SELECT *
FROM trips
INNER JOIN cars
ON trips.car_id = cars.id;

-- Stack riders table on top of new table riders2
SELECT *
FROM riders
UNION
SELECT *
FROM riders2;

-- Find average cost for a trip
SELECT ROUND(AVG(cost), 2)
FROM trips;

-- Find all riders who have used REBU less than 500 times
SELECT first, last
FROM riders
WHERE total_trips < 500
UNION
SELECT first, last
FROM riders2
WHERE total_trips < 500;

-- Calculate the number of cars that are active
SELECT COUNT(*)
FROM cars
WHERE status = 'active';

-- Find the two cars that have the highest trips completed
SELECT *
FROM cars
ORDER BY trips_completed DESC
LIMIT 2;
